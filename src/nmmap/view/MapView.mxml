<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:mq="com.mapquest.tilemap.*"
		 xmlns:flex="com.mapquest.tilemap.controls.flex.*"
		 width="100%" height="100%" creationComplete="_creationCompleteHandler(event)">
	
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.mapquest.*;
			import com.mapquest.services.geocode.*;
			import com.mapquest.tilemap.ShapeCollection;
			import com.mapquest.tilemap.TileMapEvent;
			import com.mapquest.tilemap.controls.inputdevice.*;
			import com.mapquest.tilemap.controls.shadymeadow.*;
			import com.mapquest.tilemap.overlays.CircleOverlay;
			import com.mapquest.tilemap.overlays.RectangleOverlay;
			import com.mapquest.tilemap.pois.*;
			
			import mx.events.FlexEvent;
			
			import nmmap.events.ContentWindowEvent;
			import nmmap.events.LegendEvent;
			import nmmap.vo.StoreVO;
			
			import spark.components.*;

			
			[Embed ("nmmap/images/red-pin.png")]
			private var red:Class;			
			[Embed ("nmmap/images/yellow-pin.png")]
			private var yellow:Class;
			[Embed ("nmmap/images/green-pin.png")]
			private var green:Class;
			
			
			private var _masterPoi:Poi = new Poi(new LatLng(33,-96.8), new StarMapIcon(35, 0x123456));
			private var _childPoiColl:ShapeCollection = new ShapeCollection;
			private var _masterPoiColl:ShapeCollection = new ShapeCollection;
			
			//create a ClusterDeclutter object
			private var _deClutter:IDeclutter;
			
			//create a leaderlines object
			private var _leaderLine:LeaderLines = new LeaderLines();
			
			public function goToStartView():void
			{
				statesMap.setCenter(new LatLng(35.283, -97.3058));
				statesMap.zoom = 5;
			}
			
			private function _creationCompleteHandler(event:FlexEvent):void
			{
				
				mapContainer.x = mapContainer.width/2;
				mapContainer.y = mapContainer.height/2;
				statesMap.x = -mapContainer.width/2;
				statesMap.y = -mapContainer.height/2;
				
				//add controls to the map
//				myMap.addControl(new SMLargeZoomControl());
//				myMap.addControl(new SMViewControl);
				
				statesMap.addControl(new MouseWheelZoomControl());
				statesMap.addControl(new KeyboardControl());
				
				statesMap.tileMap.showMobileCursor = true;
				//setting center based on master poi				
				statesMap.setCenter(new LatLng(35.283, -97.3058));
				
				
				
				
				//add a leader line object so we can change the properties of the leader lines
				statesMap.leaderLines = _leaderLine;
				_leaderLine.lineColor = 0x0066FF;
				
				
//				_deClutter = new  ForceDeclutter();//new CircleDeclutter();
				//turn on declutter mode
//				statesMap.declutter = _deClutter;	
				
/* master poi				
				//initialize master poi
				_masterPoi = new Poi(new LatLng(33,-96.8));
				_masterPoi.rolloverAndInfoTitleText = "master";
				_masterPoiColl.add(_masterPoi);
				myMap.addShapeCollection(_masterPoiColl);
				
				
				//initialize master poi's icon
				var redPin:MapIcon = new MapIcon();
				redPin.setImage(new red(), 48, 48);
				_masterPoi.icon = redPin;
				_masterPoi.altIcon = redPin;

				//add events
				_masterPoi.addEventListener(MouseEvent.CLICK, onMasterPoiClickHandler);
 				myMap.addEventListener(TileMapEvent.ZOOM_END, zoomHandler);
*/				

				statesMap.addEventListener(TileMapEvent.ZOOM_END, zoomHandler);
				
				statesMap.tileMap.usePinchZoom = false;
//				return;
				
				Multitouch.inputMode = MultitouchInputMode.GESTURE;

				
				
				
//				myMap.addEventListener(TransformGestureEvent.GESTURE_ZOOM, onTransformGestureZoom);
				statesMap.addEventListener(TransformGestureEvent.GESTURE_ZOOM, onZoom);
//				statesMap.addEventListener(TransformGestureEvent.GESTURE_ZOOM, onMatrixZoom);

				trace(_storeInformation);
			}			
			
 			private function onMatrixZoom(event:TransformGestureEvent):void
			{
				var matrix:Matrix = statesMap.transform.matrix;
				
				if(statesMap.scaleX*event.scaleX < 1)
				{
					statesMap.x = 0;
					statesMap.y = 0;
					return;
				}
				else
				{
					matrix.translate(-event.localX, -event.localY);
					matrix.scale(event.scaleX, event.scaleY);
					matrix.translate(event.localX, event.localY);
					statesMap.transform.matrix = matrix;
				}
//				statesMap.setCenter(_centerLatLng, statesMap.zoomLevel - statesMap.tileMap.scaleX);
			}
			
			private var _isPinching:Boolean;
			private var _centerLatLng:LatLng;
			private var _touchPoint:Point;
			
 			private function onZoom(event:TransformGestureEvent):void
			{
				
				_centerLatLng = statesMap.center;
				trace("outside else mapX and eventX " + statesMap.tileMap.scaleX + " "+ event.scaleX + " mapY and eventY " + statesMap.tileMap.scaleY + " "+ event.scaleY);
				
				if (event.phase == "begin") 
				{
					_touchPoint = this.globalToLocal(new Point(event.stageX, event.stageY));
				}
				if (event.phase == "update")
				{					//0.7 && 1.75
					if(mapContainer.scaleX*event.scaleX < 0.50 || mapContainer.scaleX*event.scaleX > 2.25) //statesMap.tileMap.scaleX*event.scaleX < 0.7 || statesMap.scaleX*event.scaleX > 1.08)
					{
					}
					else
					{
//						statesMap.tileMap.scaleX *= event.scaleX;
//						statesMap.tileMap.scaleY *= event.scaleY;
						mapContainer.scaleX *= event.scaleX;
						mapContainer.scaleY *= event.scaleY;
						
						trace(statesMap.tileMap.zoom);
						
						trace("inside else mapX and eventX " + statesMap.tileMap.scaleX + " "+ event.scaleX + " mapY and eventY " + statesMap.tileMap.scaleY + " "+ event.scaleY);
					}
					if(mapContainer.scaleX < 1)//statesMap.tileMap.scaleX < 1)
						_isPinching = true;
					if(mapContainer.scaleX > 1)//statesMap.tileMap.scaleX > 1)
						_isPinching = false;
				}
				if (event.phase == "end") 
				{
					if(_isPinching)
						statesMap.setCenter(_centerLatLng, statesMap.zoomLevel - mapContainer.scaleX);//statesMap.tileMap.scaleX);
					else
						statesMap.setCenter(_centerLatLng, statesMap.zoomLevel + mapContainer.scaleX);//statesMap.tileMap.scaleX);
//						myMap.setCenter(myMap.pixToLL(_touchPoint), myMap.zoomLevel + myMap.tileMap.scaleX);
					
					
//					statesMap.tileMap.scaleX = 1;
//					statesMap.tileMap.scaleY = 1;
					mapContainer.scaleX = 1;
					mapContainer.scaleY = 1;
				}
			}
 
			

			

			
			
			private var _coordinates:Array = [];
			public function setCoordinates(value:Array):void
			{
				_coordinates = value;
				
			}
			
			private var _storeInformation:Array = [];
			public function set locationInformation(value:Array):void
			{
				_storeInformation = value;
			}
			
			public function get locationInformation():Array{
				return _storeInformation;
			}
			
			public function plotData( coordinates:Array, details:Array ):void
			{
				_coordinates = coordinates;
				_storeInformation = details;
				mapLocationData();
			}
			
			public function updateDetails(details:Array):void
			{
				
			}
			
			public function mapLocationData():void
			{
				var length:int = _storeInformation.length;
				var poi:Poi;
				var storeInfo:StoreVO;

				_childPoiColl.removeAll();
				for (var i:int=0; i<length; i++)
				{
					storeInfo = _storeInformation[i];
					
//					trace("new StoreVO(\""+storeInfo.abbrevCombine+"\", \""+storeInfo.businessUnitCode+"\", \""+storeInfo.city+"\", \""+storeInfo.country+"\","+storeInfo.key+","+storeInfo.latitude+", new LatLng("+storeInfo.latLng+"),"+storeInfo.longitude+","+storeInfo.postalCode+", \""+storeInfo.state+"\", \""+storeInfo.storeName+"\","+storeInfo.storeNumber+", \""+storeInfo.street1+"\", \""+storeInfo.street2+"\", \""+storeInfo.subBusinessUnitCode+"\", \""+storeInfo.subBusinessUnitDesc+"\"),");
					
					
					
					poi = new Poi(_coordinates[i]);
					
					poi.rolloverAndInfoTitleText = storeInfo.storeName;

					//Use key parameter to determine which poi is clicked
					poi.key = i + "";
					//use label parameter for filttering pois
					poi.label = storeInfo.subBusinessUnitCode;
					poi.labelVisible = false;
					
 					//add event listener for each poi
					poi.addEventListener(MouseEvent.CLICK, onChildPoiClickHandler);
					
					
					poi.icon = generatePOIIcon(storeInfo);
					// set offset for custom icon
					poi.icon.anchorOffset = new Point(-24,-40);
					
					// _childPoi is the shapecollection for the child poi's, add poi's to the shapeCollection
					_childPoiColl.add(poi);
					
					//using this for update the poi color //TODO
					_storeHash[storeInfo.abbrevCombine] = poi;

					//add pois to the map
//					statesMap.addShapeCollection(_childPoiColl);
				}
				
				//add master RectangleOvery
				addMasterRect();
				
				//add Event to show store numbers in the Legend View
				dispatchEvent(new LegendEvent(LegendEvent.ADD_STORE_NUMBER, _storeInformation));
			}
			
			private function generatePOIIcon(store:StoreVO):MapIcon
			{
				// set Icon based on store.subBusinessUnitCode
				// C, P, R
				//create new icons
				var yellowPin:MapIcon = new MapIcon();
				var redPin:MapIcon = new MapIcon();
				var greenPin:MapIcon = new MapIcon();
				yellowPin.setImage(new yellow(), 48, 48);
				redPin.setImage(new red(), 48, 48);
				greenPin.setImage(new green(), 48, 48);
				
				if(store.subBusinessUnitCode == 'C')
				{
					return yellowPin;
				}
				else if(store.subBusinessUnitCode == 'R')
				{
					return greenPin;
				}
				else
				{
					return redPin;
				} 
				
			}
			private function addMasterRect():void
			{
				_masterPoiColl.removeAll();
				var vertices:Array = [null, null];
				for(var i:int = 0; i <= 19; i++) 
				{
					//set various overlay properties
					var masterRect:RectangleOverlay = new RectangleOverlay();
					masterRect.borderWidth = 2;
					masterRect.colorAlpha = 1;
					masterRect.fillColorAlpha = 0.30;
					masterRect.color = 0xFFFFFF;//003366;
					masterRect.fillColor = 0xFFFFFF;
					masterRect.doubleClickEnabled = true;
					masterRect.addEventListener(MouseEvent.MOUSE_OUT, rectangleOverlayOutHandler); 
					masterRect.addEventListener(MouseEvent.MOUSE_OVER, rectangleOverlayOverHandler); 
					masterRect.addEventListener(MouseEvent.CLICK, rectangleOverlayClickHandler); 
					
					var shapePts:LatLngCollection = new LatLngCollection();
					switch (i)
					{
						case 0:
							masterRect.key = ("texasArea");
							vertices = getVertices("TX");
							break;
						case 1:
							masterRect.key = ("CaliforniaArea");
							vertices = getVertices("CA");
							break;
						case 2:
							masterRect.key = ("NevadaArea");
							vertices = getVertices("NV");
							break;
						case 3:
							masterRect.key = ("ArizonaArea");
							vertices = getVertices("AZ");
							break;
						case 4:
							masterRect.key = ("GeorgiaArea");
							vertices = getVertices("GA");
							break;
						case 5:
							masterRect.key = ("FloidaArea");
							vertices = getVertices("FL");
							break;
						case 6:
							masterRect.key = ("IllinoisArea");
							vertices = getVertices("IL");
							break;
						case 7:
							masterRect.key = ("MichiganArea");
							vertices = getVertices("MI");
							break;
						case 8:
							masterRect.key = ("NorthCarolinaArea");
							vertices = getVertices("NC");
							break;
						case 9:
							masterRect.key = ("ColoradoArea");
							vertices = getVertices("CO");
							break;
						case 10:
							masterRect.key = ("NewYorkArea");
							vertices = getVertices("NY","NJ","PA");
							break;
						case 11:
							masterRect.key = ("NewJerseyArea");
//							vertices = getVertices("NJ");
							break;
						case 12:
							masterRect.key = ("MinnesotaArea");
							vertices = getVertices("MN");
							break;
						case 13:
							masterRect.key = ("MassachusettsArea");
							vertices = getVertices("MA");
							break;
						case 14:
							masterRect.key = ("MissouriArea");
							vertices = getVertices("MO");
							break;
						case 15:
							masterRect.key = ("PennsylvaniaArea");
//							vertices = getVertices("PA");
							break;
						case 16:
							masterRect.key = ("WashingtonArea");
							vertices = getVertices("WA");
							break;
						case 17:
							masterRect.key = ("DCVirginiaMarylandArea");
							vertices = getVertices("DC","VA","MD");
							break;
//						case 18:
//							masterRect.key = ("");
//							vertices = getVertices("VA");
//							break;
//						case 19:
//							masterRect.key = ("");
//							vertices = getVertices("MD");
//							break;
						
					}
					trace("distance is", vertices[0].arcDistance(vertices[1]));
					if(vertices[0].arcDistance(vertices[1]) < 60)
					{
						vertices[0].lat += 1;//0.35;
						vertices[0].lng += 1;//0.35;
						
						if(vertices[1] == null)
						{
							vertices[1].lat = vertices[0].lat - 1;//0.35;
							vertices[1].lng = vertices[0].lng - 1;//0.35;
						}
						else
						{							
							vertices[1].lat -= 1;//0.35;
							vertices[1].lng -= 1;//0.35;
						}
					}
					shapePts.add(vertices[0]);
					shapePts.add(vertices[1]);

					
					masterRect.shapePoints = shapePts;
					_masterPoiColl.add(masterRect);
					
				}
				
				if(statesMap.zoom == 5)
					statesMap.addShapeCollection(_masterPoiColl);
			}
			
			
			private var _storeHash:Object={};
			private function udpateStoreStatus(storeId:String):void
			{
				
				
				
			}
			
			//TODO
			private function getVertices(state:String, state2:String=null, state3:String=null):Array
			{
				var data:Array=[];
				var length:int = _storeInformation.length;
				var storeInfo:StoreVO;
				
				//find the latitude and longitude for the specific state from the value object.
				for(var i:int = 0; i<length; i++)
				{
					storeInfo = _storeInformation[i];
					if(storeInfo.state == state || storeInfo.state == state2 || storeInfo.state == state3)
						data.push(storeInfo.latLng);
					
				}
				
				//TX
//					33.042442,-98.508804                y,x               >>>+
//					URvertex:33.014809,-94.778946                ----,----         ++++,++++ 
//					LLvertext:29.637141,-98.470352
//					29.632366,-94.822891
				
				var vertices:LatLng = data[0];
				var maxLat:Number = vertices.lat;
				var maxLng:Number = vertices.lng;
				
				var minLat:Number = vertices.lat;
				var minLng:Number = vertices.lng;
				
				var lowerLeftVertex:LatLng;
				var upperRightVertex:LatLng;
				var result:Array = [];
				
				length = data.length;
				
				for(i = 0; i<length; i++)
				{
					vertices = data[i];

					if(maxLat < vertices.lat)
						maxLat = vertices.lat;
					if(maxLng < vertices.lng)
						maxLng = vertices.lng;
					
					if(minLat > vertices.lat)
						minLat = vertices.lat;
					if(minLng > vertices.lng)
						minLng = vertices.lng;
				}
				
				lowerLeftVertex = new LatLng(maxLat, maxLng);
				upperRightVertex = new LatLng(minLat, minLng);
				trace("lower: ",lowerLeftVertex,"upper: ",upperRightVertex);

				result= [lowerLeftVertex, upperRightVertex];
				return result;
			}
			protected function rectangleOverlayClickHandler(event:MouseEvent):void
			{
				var clickPoint:LatLng;
				clickPoint = statesMap.pixToLL(new Point(statesMap.mouseX, statesMap.mouseY));
				statesMap.setCenter(clickPoint);
				statesMap.zoom = 8;
				statesMap.addShapeCollection(_childPoiColl);
				
				
				trace(clickPoint);
				
				
//				statesMap.setCenter(new LatLng(31.33644,-96.547744)); //texas
			}
			protected function rectangleOverlayOutHandler(event:MouseEvent):void
			{
				event.currentTarget.fillColorAlpha = 0.40;
			}
			protected function rectangleOverlayOverHandler(event:MouseEvent):void
			{
				event.currentTarget.fillColorAlpha = 0.90;
			}
/* 			public function filterPoi():void
			{
				var length:int = _childPoiColl.length;
				var poi:Poi;
				for(var i:int = 0; i < length; i++)
				{
 					poi = _childPoiColl.getShapeAtIndex(i) as Poi; 

					if(poi.label == 'C')
					{
						trace("CCCCCCCCCC");					
					}
					if(poi.label == 'R')
					{
						trace("RRRRRRRR");					
					}
					if(poi.label == 'P')
					{
						trace("PPP");					
					}
				}
			}
 */
			public function showRedPoi():void
			{
				var length:int = _childPoiColl.length;
				var poi:Poi;
				
				for(var i:int = 0; i < length; i++)
				{
					poi = _childPoiColl.getShapeAtIndex(i) as Poi; 
					
					if(poi.label != 'P')
						poi.visible = false;
					else
						poi.visible = true;
				}
			}
			
			public function showYellowPoi():void
			{
				var length:int = _childPoiColl.length;
				var poi:Poi;
				
				for(var i:int = 0; i < length; i++)
				{
					poi = _childPoiColl.getShapeAtIndex(i) as Poi; 
					
					if(poi.label != 'C')
						poi.visible = false;
					else
						poi.visible = true;
				}
			}
			
			public function showGreenPoi():void
			{
				var length:int = _childPoiColl.length;
				var poi:Poi;
				
				for(var i:int = 0; i < length; i++)
				{
					poi = _childPoiColl.getShapeAtIndex(i) as Poi; 
					
					if(poi.label != 'R')
						poi.visible = false;
					else
						poi.visible = true;
				}
			}
			
			public function showAllPoi():void
			{
				var length:int = _childPoiColl.length;
				var poi:Poi;
				
				for(var i:int = 0; i < length; i++)
				{
					poi = _childPoiColl.getShapeAtIndex(i) as Poi; 
					
					poi.visible = true;
				}
			}			
			
			//using to zoom In or Out from the outside of this view. i.e) from the mediator
			public function customZoomIn():void
			{
				statesMap.zoomIn();
			}
			public function customZoomOut():void
			{
				statesMap.zoomOut();
			}
			
			
			
			public function setBusyCursor():void
			{
				cursorManager.setBusyCursor();
			}
			
			public function removeBusyCursor():void
			{
				cursorManager.removeBusyCursor();
			}

			
			protected function onMasterPoiClickHandler(event:MouseEvent):void
			{
				statesMap.addShapeCollection(_childPoiColl);
				statesMap.removeShape(_masterPoi);
				statesMap.zoom = 6;
				statesMap.setCenter(_masterPoi.latLng);
			}
			
			protected function zoomHandler(event:TileMapEvent):void
			{
				if(event.zoom > 6)
				{
					statesMap.addShapeCollection(_childPoiColl);
					statesMap.removeShapeCollection(_masterPoiColl);
				}
				else
				{
					statesMap.addShapeCollection(_masterPoiColl);
					statesMap.removeShapeCollection(_childPoiColl);
					
				}
			}
			
			
			private var poiClicked:Array = [];
			
			public function onChildPoiClickHandler(event:MouseEvent):void
			{
				var index:int = event.currentTarget.key;
				var storeInfo:StoreVO = _storeInformation[index];
				var point:Point = new Point(this.mouseX, this.mouseY);
				
				storeInfo.key = index;
				
				if(poiClicked[index])
					dispatchEvent(new ContentWindowEvent(ContentWindowEvent.REFRESH_CONTENT_WINDOW, storeInfo, point));
				else
					dispatchEvent(new ContentWindowEvent(ContentWindowEvent.ADD_CONTENT_WINDOW, storeInfo, point));
				
				poiClicked[index] = true;
			}
			public function contentWindowClosed(event:ContentWindowEvent):void
			{
				var index:int = event.index;
				
				poiClicked[index] = false;
			}
			
			
			protected function myMap_clickHandler(event:MouseEvent):void
			{
//				trace("myMapLL is " + myMap.tileMap.pixToLL(new Point(this.mouseX, this.mouseY)));
//				trace("Handler X is " + this.mouseX + " " + this.mouseY);
				
			}
			
			protected function myMap_gestureTwoFingerTapHandler(event:GestureEvent):void
			{
				// TODO Auto-generated method stub
				trace("myMap_gestureTwoFingerTapHandler");
				statesMap.zoomIn();
			}
			
			
			
			protected function statesMap_doubleClickHandler(event:MouseEvent):void
			{
				var clickPoint:LatLng;
				clickPoint = statesMap.pixToLL(new Point(statesMap.mouseX, statesMap.mouseY));
				statesMap.setCenter(clickPoint);
				
				
				if(statesMap.zoom < 10)
				{
					while(statesMap.zoom < 10)
						statesMap.zoomIn();
				}
				else if (statesMap.zoom < 13)
				{
					statesMap.zoomIn();
				}
				else
					return;
				
			}

		]]>
		
		

	</fx:Script>
	<s:SkinnableContainer id="mapContainer" width="1920" height="1080">
		<mq:TilemapComponent id="statesMap" 
							 key="Fmjtd%7Cluua20u7n0%2C7g%3Do5-967556"
							 width="100%" height="100%"
							 zoom="5"						
							 doubleClick="statesMap_doubleClickHandler(event)"
							 gestureTwoFingerTap="myMap_gestureTwoFingerTapHandler(event)"/>
	</s:SkinnableContainer>
		
<!-- 		
		
	<mq:TilemapComponent id="hawaiiMap" 
						 key="Fmjtd%7Cluua20u7n0%2C7g%3Do5-967556"
						 width="250" height="250"
						 x="50" y="800"
						 zoom="5"/> -->
	
 	
	
</s:Group>
